# -*- coding: utf-8 -*-
"""FakeNewsPredictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19tHUk3FPUYKwFME9XJlGr7VJAQ4KlsZn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression

true = pd.read_csv('True.csv')
fake = pd.read_csv('Fake.csv')

# first 5 rows of true news
true.head()

# first 5 rows of false/fake news
fake.head()

# creating a label to indicate if a news is true or fake
true['label']=1 #true
fake['label']=0 #fake

true.head()

fake.head()

#merging the two tables row wise
news = pd.concat([fake,true],axis=0) # since row wise thus axis=0
news.head()

news.tail()

# no. of rows and columns in new table
news.shape

# info about the data
news.describe()

# check if there are any missing values
news.isnull().sum()

# the title, subject and date columns are not needed in this project
news = news.drop(['title','subject','date'],axis=1)
news.head()

# reshuffling the data so the model is not biased since now in the upper half we have fake news and at the bottom we have true news
news = news.sample(frac=1)
news.head()

# but now the indices are wrong so to fix that
news.reset_index(inplace=True)

news.head()

news = news.drop(columns='index',axis=1)
news.head()

import re
# some words and their context is important
def wordopt(text):
  text = text.lower() # convert to lowercase

  text = re.sub(r'https?://\S+|www\.\S+','',text) # remove urls

  text = re.sub(r'[^\w\s]','',text)   # remove punctuation

  text = re.sub(r'\d','',text)   # remove digits

  text = re.sub(r'\n','',text)  # remove newline characters

  return text

news['text'] = news['text'].apply(wordopt)

news['text']

# defining x and y i.e. independent and dependent variable
x = news['text']
y = news['label']

# split data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=2)

# converting the textual data into numerical data
from sklearn.feature_extraction.text import TfidfVectorizer
vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)

#train the model
# logistic regression
lr = LogisticRegression()
lr.fit(xv_train,y_train)
print("Training accuracy : ",accuracy_score(lr.predict(xv_train),y_train))
print("Testing accuracy : ",accuracy_score(lr.predict(xv_test),y_test))

# decision tree classifier
from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier()
dtc.fit(xv_train,y_train)
print("Training accuracy : ",accuracy_score(dtc.predict(xv_train),y_train))
print("Testing accuracy : ",accuracy_score(dtc.predict(xv_test),y_test))

# random forest classifier
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state=0)
rfc.fit(xv_train,y_train)
print("Training accuracy : ",accuracy_score(rfc.predict(xv_train),y_train))
print("Testing accuracy : ",accuracy_score(rfc.predict(xv_test),y_test))

# gradient boosting classifier
from sklearn.ensemble import GradientBoostingClassifier
gbc = GradientBoostingClassifier(random_state=0)
gbc.fit(xv_train,y_train)
print("Training accuracy : ",accuracy_score(gbc.predict(xv_train),y_train))
print("Testing accuracy : ",accuracy_score(gbc.predict(xv_test),y_test))

# prediction making for input data

def manual_testing(news):
  testing_news = {"text":[news]}
  new_def_test = pd.DataFrame(testing_news)
  new_def_test["text"] = new_def_test["text"].apply(wordopt)
  new_x_test = new_def_test["text"]
  new_xv_test = vectorization.transform(new_x_test)
  pred_LR = lr.predict(new_xv_test)
  pred_gbc = gbc.predict(new_xv_test)
  pred_rfc = rfc.predict(new_xv_test)
  return "\n\nLR Prediction : {}\nGBC Prediction : {}\nRFC Prediction : {}".format(
      output_label(pred_LR[0]),output_label(pred_gbc[0]),output_label(pred_rfc[0]))

def output_label(n):
  if n==0:
    return "It is fake news"
  elif n==1:
    return "It is a genuine news"

news_article = str(input("What's the news ??!! : "))

manual_testing(news_article)