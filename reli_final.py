# -*- coding: utf-8 -*-
"""RELI_FINAL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FvGTaPbtF91ox-nPGlfcnGMEqt5_QblQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
import lightgbm as lgb



df = pd.read_csv('RELI Historical Data.csv')


df.head()

df.tail()

df.describe()

df.info()

print(df.isnull().sum())

print(df.duplicated().sum())

df.shape

# Clean the data
df = df.rename(columns=lambda x: x.strip())  # remove trailing spaces

df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')  # dae read first and invalid entries become not a time
df = df.dropna(subset=['Date']) # remove invalid dates

df['Close'] = df['Price'].replace(',', '', regex=True).astype(float)  # remove , and convert to float
df = df.sort_values('Date').reset_index(drop=True) # oldest to newest and creates new index

#  Moving averages
df['MA_5'] = df['Close'].rolling(window=5).mean()
df['MA_10'] = df['Close'].rolling(window=10).mean()
df.dropna(inplace=True)

# Train/Test Split: Last 6 months as test set
split_date = df['Date'].max() - pd.DateOffset(months=6)
train_df = df[df['Date'] <= split_date]
test_df = df[df['Date'] > split_date]

features = ['MA_5', 'MA_10']
target = 'Close'

X_train, y_train = train_df[features], train_df[target]
X_test, y_test = test_df[features], test_df[target]

# Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
lr_preds = lr_model.predict(X_test)

# LightGBM
lgb_model = lgb.LGBMRegressor()
lgb_model.fit(X_train, y_train)
lgb_preds = lgb_model.predict(X_test)


print("Performance of Linear Regression :\n")
print("MAE : ",mean_absolute_error(y_test, lr_preds))
print("R² : ",r2_score(y_test, lr_preds),"\n")
print("Performane of LightGBM :\n")
print("MAE : ",mean_absolute_error(y_test, lgb_preds))
print("R² : ",r2_score(y_test, lgb_preds))

plt.figure(figsize=(12,6))
plt.plot(test_df['Date'], y_test.values, label='Actual', color='black')
plt.plot(test_df['Date'], lr_preds, label='LR Predicted', linestyle='--')
plt.plot(test_df['Date'], lgb_preds, label='LGBM Predicted', linestyle=':')
plt.title("Actual vs Predicted Close Prices")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.grid(True,alpha=0.75)
plt.show()

# Forecast for August 2025
forecast_days = pd.date_range(start=df['Date'].max() + pd.Timedelta(days=1), periods=31)  # max gives the last date and 31 future days from next day
forecast_df = pd.DataFrame({'Date': forecast_days})

# Generate MA
last_data = df[['Close']].copy()
for i in range(31):   #calculate 5 and 10 day MA
    ma_5 = last_data['Close'].iloc[-5:].mean()
    ma_10 = last_data['Close'].iloc[-10:].mean()
    features_today = pd.DataFrame({'MA_5': [ma_5], 'MA_10': [ma_10]})

    next_pred = lgb_model.predict(features_today)[0]
    last_data = pd.concat([last_data, pd.DataFrame({'Close': [next_pred]})], ignore_index=True)

forecast_df['Predicted Close'] = last_data['Close'].iloc[-31:].values

# Plot forecast
plt.figure(figsize=(12,5))
plt.plot(forecast_df['Date'], forecast_df['Predicted Close'], marker='o')
plt.title("Forecasted RIL Prices for August 2025")
plt.xlabel("Date")
plt.ylabel("Predicted Price")
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Interactive Plot with Plotly
import plotly.graph_objects as go

fig = go.Figure()

# Add trace for predicted prices
fig.add_trace(go.Scatter(
    x=forecast_df['Date'],
    y=forecast_df['Predicted Close'],
    mode='lines+markers',
    name='Predicted Close (Aug 2025)',
    line=dict(color='limegreen', width=2),
    marker=dict(size=6)
))

fig.update_layout(
    title="Interactive Forecasted RIL Prices for August 2025",
    xaxis_title="Date",
    yaxis_title="Predicted Price (INR)",
    hovermode='x',
    template='plotly_dark',
    xaxis=dict(showgrid=True),
    yaxis=dict(showgrid=True),
    height=500
)

fig.show()

